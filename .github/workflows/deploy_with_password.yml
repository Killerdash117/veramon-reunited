name: Deploy Veramon Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Test with pytest
      run: |
        if [ -d tests ]; then pytest -v; fi
  
  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set current date as env variable
      run: echo "BUILD_DATE=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/veramon-bot:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/veramon-bot:${{ env.BUILD_DATE }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/veramon-bot:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/veramon-bot:buildcache,mode=max
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Install sshpass
      run: sudo apt-get install -y sshpass
      
    - name: Deploy to server with password
      env:
        SSH_PASS: ${{ secrets.SERVER_PASSWORD }}
      run: |
        # Create the deployment script
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        
        # Create deploy directory if it doesn't exist
        mkdir -p ${{ secrets.DEPLOY_PATH }}
        cd ${{ secrets.DEPLOY_PATH }}
        
        # Backup previous .env file if it exists
        if [ -f .env ]; then
          cp .env .env.backup
        fi
        
        # Create or update .env file
        if [ ! -f .env ]; then
          echo "Creating new .env file"
          cat > .env << EOF
        BOT_TOKEN=${{ secrets.BOT_TOKEN }}
        COMMAND_PREFIX=!
        DATABASE_PATH=data/veramon_reunited.db
        DEBUG_MODE=False
        MAINTENANCE_MODE=False
        LOG_LEVEL=INFO
        EOF
        fi
        
        # Download the docker-compose file
        wget -O docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker/docker-compose.yml
        
        # Pull the new image
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/veramon-bot:latest
        
        # Setup directories for persistent data
        mkdir -p data logs battle-system-data trading-data factions-data events-data quests-data tournament-data
        chmod -R 777 data logs battle-system-data trading-data factions-data events-data quests-data tournament-data
        
        # Restart the container
        docker-compose down
        docker-compose up -d
        
        # Check if the bot is running properly
        sleep 10
        if ! docker ps | grep veramon-bot; then
          echo "Error: Bot failed to start"
          docker logs veramon-bot --tail 50
          exit 1
        fi
        
        # Clean up old images
        docker image prune -af --filter "until=24h"
        
        echo "Deployment successful!"
        EOL
        
        chmod +x deploy.sh
        
        # Execute the deployment script on the server using password authentication
        sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no deploy.sh ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/tmp/deploy.sh
        sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "bash /tmp/deploy.sh && rm /tmp/deploy.sh"
